name: Build docker image

on:
  workflow_call:
    inputs:
      odoo_version:
        required: true
        type: string
      python_version:
        required: true
        type: string
      python_variant:
        required: true
        type: string
      wkhtmltox_version:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      dockerfile_target:
        required: true
        type: string
      no_cache:
        description: Disable the Docker cache for this build
        required: false
        type: boolean
        default: false

    outputs:
      image_digest:
        description: The image digest to be used on a caller workflow
        value: ${{ jobs.build.outputs.image_digest }}

jobs:
  build:
    name: Build images
    timeout-minutes: 30
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          # Platform-specific runner overrides
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_name: ${{ fromJSON(steps.build.outputs.metadata)['image.name'] }}
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      DOCKER_BUILD_SUMMARY: ${{ github.event_name == 'pull_request' && false || true }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5.1.0
        with:
          short-length: 7

      - name: Prepare manifest
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ghcr.io/iterativo-git/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}

      - name: Login to GitHub Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3.6.0

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Build & push
        id: build
        uses: docker/build-push-action@v6.15.0
        with:
          target: ${{ inputs.dockerfile_target }}
          file: ${{ inputs.dockerfile_path }}
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ODOO_VERSION=${{ inputs.odoo_version }}
            PYTHON_VERSION=${{ inputs.python_version }}
            PYTHON_VARIANT=${{ inputs.python_variant }}
            WKHTMLTOX_VERSION=${{ inputs.wkhtmltox_version }}
          platforms: ${{ matrix.platform }}
          push: true
          # Don't read from the cache if the caller disabled it.
          # https://docs.docker.com/engine/reference/commandline/buildx_build/#options
          no-cache: ${{ inputs.no_cache }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4.6.2
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5.1.0
        with:
          short-length: 7

      - name: Download digests
        uses: actions/download-artifact@v4.2.1
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Google Container Registry
        uses: docker/login-action@v3.4.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GKE_SA_KEY }}

      - name: Login to DockerHub
        uses: docker/login-action@v3.4.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.10.0

      # Automatic tag management and OCI Image Format Specification for labels
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/iterativo-git/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}
            iterativodo/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }},enable=${{ github.event_name != 'pull_request' }}
            gcr.io/iterativo/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }},enable=${{ github.event_name != 'pull_request' }}
          # Use predefined flavor with version customization
          flavor: |
            latest=false
          # Generate Docker tags based on predefined rules
          tags: |
            type=raw,event=push,value=${{ inputs.odoo_version }},enable={{is_default_branch}}
            type=raw,event=pr,value=${{ env.GITHUB_REF_SLUG }}-${{ inputs.odoo_version }}
            type=schedule,value=${{ inputs.odoo_version }}

      - name: Set base image name
        run: |
          # Extract the first image from DOCKER_METADATA_OUTPUT_JSON as base reference
          BASE_IMAGE_NAME=$(jq -r '.tags[0]' <<< "$DOCKER_METADATA_OUTPUT_JSON" | cut -d':' -f1)
          echo "BASE_IMAGE_NAME=${BASE_IMAGE_NAME}" >> $GITHUB_ENV

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          # For each registry/image combination, create a manifest list
          for IMAGE_REF in $(jq -r '.tags[]' <<< "$DOCKER_METADATA_OUTPUT_JSON" | cut -d':' -f1 | sort -u); do
            echo "Creating manifest for ${IMAGE_REF}"
            docker buildx imagetools create $(jq -cr '.tags | map(select(startswith("'"${IMAGE_REF}:"'")) | "-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf '${BASE_IMAGE_NAME}@sha256:%s ' *)
          done

      - name: Inspect images
        run: |
          # Inspect each unique image reference
          for IMAGE_REF in $(jq -r '.tags[]' <<< "$DOCKER_METADATA_OUTPUT_JSON" | cut -d':' -f1 | sort -u); do
            VERSION_TAG=$(jq -r '.tags[] | select(startswith("'"${IMAGE_REF}:"'"))' <<< "$DOCKER_METADATA_OUTPUT_JSON" | head -1 | cut -d':' -f2)
            echo "Inspecting ${IMAGE_REF}:${VERSION_TAG}"
            docker buildx imagetools inspect "${IMAGE_REF}:${VERSION_TAG}"
          done
